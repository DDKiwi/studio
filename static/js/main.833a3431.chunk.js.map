{"version":3,"sources":["Images/202008.jpg","Components/Page.js","Pages/About.js","Pages/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","title","children","className","style","background","Page","href","App","id","exact","path","Home","About","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4EAAAA,EAAOC,QAAU,IAA0B,oC,4JCe5B,WAACC,GAAW,IACjBC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SAEf,OACE,yBAAKC,UAAU,YAAYC,MAAO,CAAEC,WAFrB,gBAGZJ,GAAS,4BAAKA,GACdC,GAAYA,IClBJ,aACb,OAAO,kBAACI,EAAD,CAAML,MAAO,gBCDP,aACb,OACE,kBAACK,EAAD,KACE,4DACA,6BACA,8DACA,6BACA,6CACA,4BACE,4BACE,uBAAGH,UAAU,UAAUI,KAAK,KAA5B,4BAKJ,6BACA,6BACA,yC,MCYSC,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,GAAG,QACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,UACV,kBAACE,EAAD,WCZQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.833a3431.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/202008.13141fe3.jpg\";","import React from \"react\";\r\n\r\nconst bgColor = [\r\n  \"#ffc\",\r\n  \"#ddd\",\r\n  \"#f6d9d5\",\r\n  \"#15acee\",\r\n  \"#ffaa94\",\r\n  \"#16ba6f\",\r\n  \"#f37735\",\r\n  \"#7c828e\",\r\n  \"#fffdc9\",\r\n  \"#f9717f\",\r\n];\r\n\r\nexport default (props) => {\r\n  const { title, children } = props;\r\n  var background = \"transparent\";// bgColor[Math.floor(Math.random() * bgColor.length)];\r\n  return (\r\n    <div className=\"container\" style={{ background: background }}>\r\n      {title && <h1>{title}</h1>}\r\n      {children && children}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Page from \"../Components/Page\";\r\n\r\nexport default () => {\r\n  return <Page title={\"Mostly art\"}></Page>;\r\n};\r\n","import React from \"react\";\r\nimport Page from \"../../Components/Page\";\r\n\r\nexport default () => {\r\n  return (\r\n    <Page>\r\n      <h1>Daniel Violin Lönnesjö</h1>\r\n      <br />\r\n      <h2>Artist, painting and sculpture</h2>\r\n      <br />\r\n      <h3>— Events</h3>\r\n      <ul>\r\n        <li>\r\n          <a className=\"compass\" href=\"/\">\r\n            29/8 - 20/9 Galleri 70\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <br />\r\n      <br />\r\n      <p>©2020</p>\r\n      {/* <p lang=\"en-gb\">\r\n        —{\" \"}\r\n        <a href=\"mailto:contact@dvlstudio.com\">hello(at)lonnesjo(dot)com</a>\r\n      </p> */}\r\n    </Page>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport About from \"./Pages/About\"\nimport Home from \"./Pages/Home\"\nimport Work from \"./Pages/Work\"\n\n// const work = () => {\n//   const components = [A, B];\n//   const componentsToRender = components.map((Component, i) => (\n//     <Component key={i} testProp=\"testProp\" />\n//   ));\n//   return <div>{componentsToRender}</div>;\n// };\n\nfunction App() {\n  return (\n    <Router>\n      <div id=\"home\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}